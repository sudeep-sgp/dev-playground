{"ast":null,"code":"import _defineProperty from\"/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Form,Label,Input,Button,FormGroup}from'reactstrap';var AddUserForm=function AddUserForm(props){var initialFormState={text:'',confidential:false};var _useState=useState(initialFormState),_useState2=_slicedToArray(_useState,2),note=_useState2[0],setNote=_useState2[1];var handleInputChange=function handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;var newval=value;if(name==='confidential'){newval=!note.confidential;}setNote(_objectSpread({},note,_defineProperty({},name,newval)));};return React.createElement(Form,{onSubmit:function onSubmit(event){event.preventDefault();if(!note.text)return;// prevent adding empty notes!\nprops.addNote(note);setNote(initialFormState);}},React.createElement(FormGroup,null,React.createElement(Label,null,\"Text\"),React.createElement(Input,{type:\"text\",name:\"text\",value:note.text,onChange:handleInputChange})),React.createElement(FormGroup,{check:true},React.createElement(Label,{check:true},React.createElement(Input,{type:\"checkbox\",name:\"confidential\",checked:note.confidential,onChange:handleInputChange}),\" Confidential\")),React.createElement(Button,{color:\"primary\"},\"Add new note\"));};export default AddUserForm;","map":{"version":3,"sources":["/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/src/forms/AddNoteForm.tsx"],"names":["React","useState","Form","Label","Input","Button","FormGroup","AddUserForm","props","initialFormState","text","confidential","note","setNote","handleInputChange","event","target","name","value","newval","preventDefault","addNote"],"mappings":"uzBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,KAAtB,CAA6BC,MAA7B,CAAqCC,SAArC,KAAsD,YAAtD,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAkB,CACpC,GAAMC,CAAAA,gBAAuD,CAAG,CAAEC,IAAI,CAAE,EAAR,CAAYC,YAAY,CAAE,KAA1B,CAAhE,CADoC,cAEVV,QAAQ,CAACQ,gBAAD,CAFE,wCAE5BG,IAF4B,eAEtBC,OAFsB,eAIpC,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAkB,mBAClBA,KAAK,CAACC,MADY,CAClCC,IADkC,eAClCA,IADkC,CAC5BC,KAD4B,eAC5BA,KAD4B,CAG1C,GAAIC,CAAAA,MAAM,CAAGD,KAAb,CACA,GAAID,IAAI,GAAK,cAAb,CAA6B,CAC3BE,MAAM,CAAG,CAACP,IAAI,CAACD,YAAf,CACD,CAEDE,OAAO,kBAAMD,IAAN,oBAAaK,IAAb,CAAoBE,MAApB,GAAP,CACD,CATD,CAWA,MACE,qBAAC,IAAD,EACE,QAAQ,CAAE,kBAAAJ,KAAK,CAAI,CACjBA,KAAK,CAACK,cAAN,GAEA,GAAI,CAACR,IAAI,CAACF,IAAV,CAAgB,OAAO;AAEvBF,KAAK,CAACa,OAAN,CAAcT,IAAd,EACAC,OAAO,CAACJ,gBAAD,CAAP,CACD,CARH,EAUE,oBAAC,SAAD,MACE,oBAAC,KAAD,aADF,CAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,KAAK,CAAEG,IAAI,CAACF,IAA3C,CAAiD,QAAQ,CAAEI,iBAA3D,EAFF,CAVF,CAcE,oBAAC,SAAD,EAAW,KAAK,KAAhB,EACE,oBAAC,KAAD,EAAO,KAAK,KAAZ,EACA,oBAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,IAAI,CAAC,cAA5B,CAA2C,OAAO,CAAEF,IAAI,CAACD,YAAzD,CAAuE,QAAQ,CAAEG,iBAAjF,EADA,iBADF,CAdF,CAmBE,oBAAC,MAAD,EAAQ,KAAK,CAAC,SAAd,iBAnBF,CADF,CAuBD,CAtCD,CAwCA,cAAeP,CAAAA,WAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Label, Input, Button, FormGroup } from 'reactstrap'\n\ninterface Props {\n  addNote: (note: {text: string, confidential: boolean}) => void\n}\ninterface Event {\n  target: any\n}\n\nconst AddUserForm = (props: Props) => {\n  const initialFormState: {text: string, confidential: boolean} = { text: '', confidential: false }\n  const [ note, setNote ] = useState(initialFormState)\n\n  const handleInputChange = (event: Event) => {\n    const { name, value } = event.target\n\n    let newval = value\n    if (name === 'confidential') {\n      newval = !note.confidential\n    }\n\n    setNote({ ...note, [name]: newval })\n  }\n\n  return (\n    <Form\n      onSubmit={event => {\n        event.preventDefault()\n        \n        if (!note.text) return // prevent adding empty notes!\n\n        props.addNote(note)\n        setNote(initialFormState)\n      }}\n    >\n      <FormGroup>\n        <Label>Text</Label>\n        <Input type=\"text\" name=\"text\" value={note.text} onChange={handleInputChange} />\n      </FormGroup>\n      <FormGroup check>      \n        <Label check>\n        <Input type=\"checkbox\" name=\"confidential\" checked={note.confidential} onChange={handleInputChange} /> Confidential\n        </Label>\n      </FormGroup>\n      <Button color=\"primary\">Add new note</Button>\n    </Form>\n  )\n}\n\nexport default AddUserForm\n"]},"metadata":{},"sourceType":"module"}