{"ast":null,"code":"import _defineProperty from\"/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Form,Label,Input,Button,FormGroup}from'reactstrap';var EditNoteForm=function EditNoteForm(props){var _useState=useState(props.currentNote),_useState2=_slicedToArray(_useState,2),note=_useState2[0],setNote=_useState2[1];useEffect(function(){setNote(props.currentNote);},[props]);// You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\nvar handleInputChange=function handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;var newval=value;if(name==='confidential'){newval=!note.confidential;}setNote(_objectSpread({},note,_defineProperty({},name,newval)));};return React.createElement(Form,{onSubmit:function onSubmit(event){event.preventDefault();props.updateNote(note.id,note);}},React.createElement(FormGroup,null,React.createElement(Label,null,\"Text\"),React.createElement(Input,{type:\"text\",name:\"text\",value:note.text,onChange:handleInputChange})),React.createElement(FormGroup,{check:true},React.createElement(Label,{check:true},React.createElement(Input,{type:\"checkbox\",name:\"confidential\",checked:note.confidential,onChange:handleInputChange}),\" Confidential\")),React.createElement(Button,{color:\"primary\"},\"Update note\"),' ',React.createElement(Button,{color:\"secondary\",onClick:function onClick(){return props.setEditing(false);},className:\"button muted-button\"},\"Cancel\"));};export default EditNoteForm;","map":{"version":3,"sources":["/Users/sudeep/Library/Mobile Documents/com~apple~CloudDocs/myfiles/NEW_LEARNINGS/SPRING-BOOT/KAFKA/STOCKS-ESG-SERVICES/dev-playground/spring-boot-dev/stocks-example/stocks-gateway/src/main/ui/src/forms/EditNoteForm.tsx"],"names":["React","useState","useEffect","Form","Label","Input","Button","FormGroup","EditNoteForm","props","currentNote","note","setNote","handleInputChange","event","target","name","value","newval","confidential","preventDefault","updateNote","id","text","setEditing"],"mappings":"uzBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,OAASC,IAAT,CAAeC,KAAf,CAAsBC,KAAtB,CAA6BC,MAA7B,CAAqCC,SAArC,KAAsD,YAAtD,CAYA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAkB,eACXR,QAAQ,CAACQ,KAAK,CAACC,WAAP,CADG,wCAC7BC,IAD6B,eACvBC,OADuB,eAGrCV,SAAS,CACP,UAAM,CACJU,OAAO,CAACH,KAAK,CAACC,WAAP,CAAP,CACD,CAHM,CAIP,CAAED,KAAF,CAJO,CAAT,CAMA;AAEA,GAAMI,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAkB,mBAClBA,KAAK,CAACC,MADY,CAClCC,IADkC,eAClCA,IADkC,CAC5BC,KAD4B,eAC5BA,KAD4B,CAG1C,GAAIC,CAAAA,MAAM,CAAGD,KAAb,CACA,GAAID,IAAI,GAAK,cAAb,CAA6B,CAC3BE,MAAM,CAAG,CAACP,IAAI,CAACQ,YAAf,CACD,CAEDP,OAAO,kBAAMD,IAAN,oBAAaK,IAAb,CAAoBE,MAApB,GAAP,CACD,CATD,CAWA,MACE,qBAAC,IAAD,EACE,QAAQ,CAAE,kBAAAJ,KAAK,CAAI,CACjBA,KAAK,CAACM,cAAN,GAEAX,KAAK,CAACY,UAAN,CAAiBV,IAAI,CAACW,EAAtB,CAA0BX,IAA1B,EACD,CALH,EAOE,oBAAC,SAAD,MACE,oBAAC,KAAD,aADF,CAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,KAAK,CAAEA,IAAI,CAACY,IAA3C,CAAiD,QAAQ,CAAEV,iBAA3D,EAFF,CAPF,CAWE,oBAAC,SAAD,EAAW,KAAK,KAAhB,EACE,oBAAC,KAAD,EAAO,KAAK,KAAZ,EACA,oBAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,IAAI,CAAC,cAA5B,CAA2C,OAAO,CAAEF,IAAI,CAACQ,YAAzD,CAAuE,QAAQ,CAAEN,iBAAjF,EADA,iBADF,CAXF,CAgBE,oBAAC,MAAD,EAAQ,KAAK,CAAC,SAAd,gBAhBF,CAgB+C,GAhB/C,CAiBE,oBAAC,MAAD,EAAQ,KAAK,CAAC,WAAd,CAA0B,OAAO,CAAE,yBAAMJ,CAAAA,KAAK,CAACe,UAAN,CAAiB,KAAjB,CAAN,EAAnC,CAAkE,SAAS,CAAC,qBAA5E,WAjBF,CADF,CAuBD,CA7CD,CA+CA,cAAehB,CAAAA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Note } from '../Note'\nimport { Form, Label, Input, Button, FormGroup } from 'reactstrap'\n\ninterface Props {\n  currentNote: Note,\n  updateNote: (id: number, note: Note) => void,\n  setEditing: (isEditing: boolean) => void,\n  editing: boolean\n}\ninterface Event {\n  target: any\n}\n\nconst EditNoteForm = (props: Props) => {\n  const [ note, setNote ] = useState(props.currentNote)\n\n  useEffect(\n    () => {\n      setNote(props.currentNote)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = (event: Event) => {\n    const { name, value } = event.target\n\n    let newval = value\n    if (name === 'confidential') {\n      newval = !note.confidential\n    }\n\n    setNote({ ...note, [name]: newval })\n  }\n\n  return (\n    <Form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateNote(note.id, note)\n      }}\n    >\n      <FormGroup>\n        <Label>Text</Label>\n        <Input type=\"text\" name=\"text\" value={note.text} onChange={handleInputChange} />\n      </FormGroup>\n      <FormGroup check>      \n        <Label check>\n        <Input type=\"checkbox\" name=\"confidential\" checked={note.confidential} onChange={handleInputChange} /> Confidential\n        </Label>\n      </FormGroup>\n      <Button color=\"primary\">Update note</Button>{' '}\n      <Button color=\"secondary\" onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </Button>\n    </Form>\n  )\n}\n\nexport default EditNoteForm\n"]},"metadata":{},"sourceType":"module"}