{"version":3,"sources":["forms/AddNoteForm.tsx","forms/EditNoteForm.tsx","tables/NoteTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddUserForm","props","initialFormState","text","confidential","useState","note","setNote","handleInputChange","event","target","name","newval","value","Form","onSubmit","preventDefault","addNote","FormGroup","Label","Input","type","onChange","check","checked","Button","color","EditNoteForm","currentNote","useEffect","updateNote","id","onClick","setEditing","className","NoteTable","Table","hover","responsive","notes","length","map","key","editRow","deleteNote","colSpan","App","setNotes","setCurrentNote","editing","isAuthenticated","setAuthenticated","authenticatedUser","setAuthenticatedUser","useCookies","cookies","getNotes","a","async","fetch","response","json","body","runAsync","Container","Jumbotron","action","method","port","window","location","href","hostname","Row","Col","lg","updatedNote","headers","JSON","stringify","then","result","AddNoteForm","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0484c7c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Label, Input, Button, FormGroup } from 'reactstrap'\n\ninterface Props {\n  addNote: (note: {text: string, confidential: boolean}) => void\n}\ninterface Event {\n  target: any\n}\n\nconst AddUserForm = (props: Props) => {\n  const initialFormState: {text: string, confidential: boolean} = { text: '', confidential: false }\n  const [ note, setNote ] = useState(initialFormState)\n\n  const handleInputChange = (event: Event) => {\n    const { name, value } = event.target\n\n    let newval = value\n    if (name === 'confidential') {\n      newval = !note.confidential\n    }\n\n    setNote({ ...note, [name]: newval })\n  }\n\n  return (\n    <Form\n      onSubmit={event => {\n        event.preventDefault()\n        \n        if (!note.text) return // prevent adding empty notes!\n\n        props.addNote(note)\n        setNote(initialFormState)\n      }}\n    >\n      <FormGroup>\n        <Label>Text</Label>\n        <Input type=\"text\" name=\"text\" value={note.text} onChange={handleInputChange} />\n      </FormGroup>\n      <FormGroup check>      \n        <Label check>\n        <Input type=\"checkbox\" name=\"confidential\" checked={note.confidential} onChange={handleInputChange} /> Confidential\n        </Label>\n      </FormGroup>\n      <Button color=\"primary\">Add new note</Button>\n    </Form>\n  )\n}\n\nexport default AddUserForm\n","import React, { useState, useEffect } from 'react'\nimport { Note } from '../Note'\nimport { Form, Label, Input, Button, FormGroup } from 'reactstrap'\n\ninterface Props {\n  currentNote: Note,\n  updateNote: (id: number, note: Note) => void,\n  setEditing: (isEditing: boolean) => void,\n  editing: boolean\n}\ninterface Event {\n  target: any\n}\n\nconst EditNoteForm = (props: Props) => {\n  const [ note, setNote ] = useState(props.currentNote)\n\n  useEffect(\n    () => {\n      setNote(props.currentNote)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\n\n  const handleInputChange = (event: Event) => {\n    const { name, value } = event.target\n\n    let newval = value\n    if (name === 'confidential') {\n      newval = !note.confidential\n    }\n\n    setNote({ ...note, [name]: newval })\n  }\n\n  return (\n    <Form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateNote(note.id, note)\n      }}\n    >\n      <FormGroup>\n        <Label>Text</Label>\n        <Input type=\"text\" name=\"text\" value={note.text} onChange={handleInputChange} />\n      </FormGroup>\n      <FormGroup check>      \n        <Label check>\n        <Input type=\"checkbox\" name=\"confidential\" checked={note.confidential} onChange={handleInputChange} /> Confidential\n        </Label>\n      </FormGroup>\n      <Button color=\"primary\">Update note</Button>{' '}\n      <Button color=\"secondary\" onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </Button>\n    </Form>\n  )\n}\n\nexport default EditNoteForm\n","import React from 'react'\nimport { Note } from '../Note'\nimport { Table, Button } from 'reactstrap'\n\ninterface Props {\n  notes: Note[]\n  editRow: (note: Note) => void,\n  deleteNote: (id: number) => void\n}\n\nconst NoteTable = (props: Props) => (\n  <Table hover responsive>\n    <thead>\n      <tr>\n        <th>Text</th>\n        <th>Confidential</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.notes.length > 0 ? (\n        props.notes.map(note => (\n          <tr key={note.id}>\n            <td>{note.text}</td>\n            <td>{note.confidential ? 'true' : 'false'}</td>\n            <td>\n              <Button color=\"secondary\"\n                onClick={() => {\n                  props.editRow(note)\n                }}\n              >\n                Edit\n              </Button>{' '}\n              <Button color=\"danger\"\n                onClick={() => props.deleteNote(note.id)}\n              >\n                Delete\n              </Button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No notes</td>\n        </tr>\n      )}\n    </tbody>\n  </Table>\n)\n\nexport default NoteTable\n","// adapted from https://github.com/taniarascia/react-hooks\n\nimport './App.css'\nimport React, { useState, Fragment, useEffect } from 'react'\nimport AddNoteForm from './forms/AddNoteForm'\nimport EditNoteForm from './forms/EditNoteForm'\nimport NoteTable from './tables/NoteTable'\nimport { Note } from './Note'\nimport { Container, Row, Col, Jumbotron, Button, Form, Input } from 'reactstrap'\nimport { useCookies } from 'react-cookie'\n\nconst App = () => {\n  // Data\n  const notesData : Note[] = []\n  const initialFormState = {id: 0, text: '', confidential: false }\n\n  // Setting state\n  const [ notes, setNotes ] = useState(notesData)\n  const [ currentNote, setCurrentNote ] = useState(initialFormState)\n  const [ editing, setEditing ] = useState(false)\n  const [ isAuthenticated, setAuthenticated ] = useState(false)\n  const [ authenticatedUser, setAuthenticatedUser ] = useState('')\n  const [ cookies ] = useCookies(['XSRF-TOKEN'])\n\n  const getNotes = async () => {\n    try {\n      const response = await fetch('/api/notes')\n      const notes = await response.json()\n      setNotes(notes)\n    } catch {\n      // add better error handling here (e.g. 401?)\n    }\n  }\n\n  useEffect(() => {\n    // Create a scoped async function in the hook\n    async function runAsync() {\n      try {\n        const response = await fetch('/api/user')\n        const body = await response.text()\n\n        if (body === '') {\n          setAuthenticated(false)\n          setAuthenticatedUser('')\n        } else {\n          setAuthenticated(true)\n          setAuthenticatedUser(body)\n          getNotes()\n        }\n      } catch {\n        // add better error handling here\n      }\n    }\n    // Execute the created function directly\n    runAsync()\n  // https://stackoverflow.com/a/55854902/1098564  \n  // eslint-disable-next-line\n  }, [])\n\n  // CRUD operations\n  const addNote = (note: {text: string, confidential: boolean}) => {\n    fetch('/api/notes', {\n      // credentials: 'include',\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-XSRF-TOKEN': cookies['XSRF-TOKEN']\n      },\n      body: JSON.stringify(note),\n    }).then((result) => {\n      getNotes()\n    })\n  }\n    \n  const deleteNote = (id: number) => {\n    setEditing(false)\n\n    fetch(`/api/notes/${id}`, {\n      // credentials: 'include',\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-XSRF-TOKEN': cookies['XSRF-TOKEN']\n      }\n    }).then(() => {\n        getNotes()\n    })\n  }\n\n  const updateNote = (id: number, updatedNote: Note) => {\n    setEditing(false)\n\n    fetch(`/api/notes/${id}`, {\n      // credentials: 'include',\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-XSRF-TOKEN': cookies['XSRF-TOKEN']\n      },\n      body: JSON.stringify(updatedNote),\n    }).then((result) => {\n      getNotes()\n    })\n  }\n\n  const editRow = (note: Note) => {\n    setEditing(true)\n\n    setCurrentNote({ id: note.id, text: note.text, confidential: note.confidential })\n  }\n  \n  const login = () => {\n    let port = (window.location.port ? ':' + window.location.port : '')\n    window.location.href = '//' + window.location.hostname + port + '/private'\n  }\n\n  return (\n    <Container>\n      <Jumbotron id=\"jumbotron\">\n        <h1>CRUD App with Hooks</h1>\n        {isAuthenticated ?\n        <>\n          <Form action=\"/logout\" method=\"POST\">\n            <Input type=\"hidden\" name=\"_csrf\" value={cookies['XSRF-TOKEN']}/>\n            <h3>Welcome {authenticatedUser}!</h3><Button color=\"secondary\">Logout</Button>\n          </Form>\n        </> :\n        <Button onClick={login}>Login</Button>\n        }\n      </Jumbotron>\n      {isAuthenticated &&\n      <Row>\n        <Col lg=\"6\">\n          {editing ? (\n            <Fragment>\n              <h2>Edit note</h2>\n              <EditNoteForm\n                editing={editing}\n                setEditing={setEditing}\n                currentNote={currentNote}\n                updateNote={updateNote}\n              />\n            </Fragment>\n          ) : (\n            <Fragment>\n              <h2>Add note</h2>\n              <AddNoteForm addNote={addNote} />\n            </Fragment>\n          )}\n        </Col>\n        <Col lg=\"6\">\n          <h2>View notes</h2>\n          <NoteTable notes={notes} editRow={editRow} deleteNote={deleteNote} />\n        </Col>\n      </Row>\n      }\n    </Container>    \n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}